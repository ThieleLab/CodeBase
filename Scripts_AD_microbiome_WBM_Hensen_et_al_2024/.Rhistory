x %>% group_by(ID) %>%
mutate(
# Scale each value to the total abundance for the sample
value_norm = value / sum(value, na.rm = TRUE),
# Remove extremely low values by replacing them with NA
value_norm = if_else(value_norm < 1e-6, NA, value_norm))
}
# First normalise the species reads based on all reads
normalisedSpecies <- processedTotalReads %>%
# Normalise the species reads including all taxa that are not identified at the species level
normaliseReads() %>% rename(all_taxa = value_norm) %>%
# Remove all non-species taxa
filter(Taxon %in% speciesInData) %>%
# Normalise the species reads again, but now without the other taxa
normaliseReads() %>% rename(all_species = value_norm)
# Then, normalise only the mapped species
normalisedMappedSpecies <- normalisedSpecies %>%
select(ID, Taxon, value, mapped) %>%
filter(mapped=="mapped") %>%
normaliseReads() %>%
rename(mapped_species = value_norm)
# Combine data
normalisedSpeciesData <- normalisedSpecies %>% left_join(normalisedMappedSpecies)
## Step 3: Generate summary statistics
# Create function for formatting summary statistic data
meanSD <- function(x) {str_c(format(mean(x, na.rm = TRUE)*100,digits=4),' (',format(sd(x, na.rm = TRUE)*100,digits=4),')')}
raStatsSpecies <- normalisedSpeciesData %>%
# Rename 'Taxon' to 'Species' for clarity
rename(Species = Taxon) %>%
# Summarize abundance statistics for each species across all samples
group_by(Species) %>%
summarise(`R.A all taxa: Mean (SD)` = meanSD(all_taxa),
`R.A mapped and unmapped species reads: Mean (SD)` = meanSD(all_species),
`R.A mapped species reads: Mean (SD)` = meanSD(mapped_species),
mean_mapped = mean(mapped_species,na.rm=TRUE)) %>%
arrange(desc(mean_mapped)) %>% select(-mean_mapped)
return(raStatsSpecies)
}
microbiomePhylumSummaryStats <- function(rawMicrobes, fluxAll, mappedSpecies, speciesInData){
## Step 1: Process the raw read counts
# Filter on flux samples
processedTotalReads <- rawMicrobes %>%
# Convert wide format data to long format
# Retains all columns except 'Taxon', pivoting others into 'ID' and 'value' columns.
pivot_longer(cols = -c('Taxon'), names_to = 'ID') %>%
# Convert back to wide format, using 'Taxon' as column names
pivot_wider(names_from = 'Taxon') %>%
# Clean up sample IDs by removing the prefix 'Sample'
mutate(ID = gsub('Sample', '', ID)) %>%
# Filter to retain only samples present in the fluxAll dataset
filter(ID %in% fluxAll$ID) %>%
# Convert back to long format for further transformations
pivot_longer(cols = -c('ID'), names_to = 'Taxon') %>%
# Replace zero values with NA to avoid including them in calculations
mutate(value = if_else(value == 0, NA, value)) %>%
# Extract species-level information from the 'Taxon' column
group_by(ID) %>%
mutate(
Species = if_else(
str_detect(Taxon, 's__'),                                      # Check if the 'Taxon' contains 's__'
str_extract(Taxon, '(?<=g__).*') %>% gsub('; s__', ' ', .), 'NA')) %>% # Extract and clean species name
ungroup() %>%
# Identify whether each Taxon is in the mapped species list
mutate(Species = if_else(Species == 'Ruminococcus champanellensis',
'Ruminococcus chamellensis', Species),
Species = if_else(Species == 'Prevotella__9 copri',
'Prevotella_9 copri', Species),
mapped = if_else(Species %in% mappedSpecies$mapped, 'mapped', 'unmapped')) %>%
# Find the Phylum names
mutate(Phylum = str_extract(Taxon, '(?<=p__)(.*?)(?=; c__)')) %>% select(-Taxon)
# Calculate the phylum level reads for the total and mapped reads
# First do it for all reads
calculatePhylumReads <- function(x){
x %>% group_by(ID, Phylum) %>% summarise(value = sum(value,na.rm = TRUE))
}
# Calculate the total phylum reads
phylumReadsTotal <- processedTotalReads %>% calculatePhylumReads()
# Calculate the mapped phylum reads
phylumReadsMapped <- processedTotalReads %>% filter(mapped=="mapped") %>% calculatePhylumReads()
## Step 2: Normalise the read counts
normaliseReads <- function(x){
x %>% group_by(ID) %>%
mutate(
# Scale each value to the total abundance for the sample
value_norm = value / sum(value, na.rm = TRUE),
# Remove extremely low values by replacing them with NA
value_norm = if_else(value_norm < 1e-6, NA, value_norm))
}
# First normalise the species reads based on all reads
phylumReadsTotalnorm <- phylumReadsTotal %>% normaliseReads() %>% rename(all_reads = value_norm) %>% select(-value)
phylumReadsMappednorm <- phylumReadsMapped %>% normaliseReads() %>% rename(mapped_reads = value_norm) %>% select(-value)
# Combine data
phylumReadsNorm <- phylumReadsTotalnorm %>% left_join(phylumReadsMappednorm)
## Step 3: Generate summary statistics
# Create function for formatting summary statistic data
meanSD <- function(x) {str_c(format(mean(x, na.rm = TRUE)*100,digits=4),' (',format(sd(x, na.rm = TRUE)*100,digits=4),')')}
raStatsPhyla <- phylumReadsNorm %>%
# Summarize abundance statistics for each species across all samples
group_by(Phylum) %>%
summarise(`R.A all reads: Mean (SD)` = meanSD(all_reads),
`R.A mapped reads: Mean (SD)` = meanSD(mapped_reads),
mean_mapped = mean(mapped_reads,na.rm=TRUE)) %>%
arrange(desc(mean_mapped)) %>% select(-mean_mapped)
return(raStatsPhyla)
}
getMicrobiomeSuppTables <- function(fluxAll){
# Load microbiome annotations
taxa <- read.csv(here('inputs', 'microbiome_annotations.csv'))$microbe %>% sort()
# Get mapped species
# Reads a CSV file with species mapping, cleans up species names by removing prefixes,
# replacing underscores with spaces, and selects only the 'mapped' column for further processing.
mappedSpecies <- read.csv(here('inputs', 'MARS_species.csv')) %>%
mutate(Species = gsub('pan', '', Species),         # Remove 'pan' prefix
Species = gsub('_', ' ', Species)) %>%      # Replace underscores with spaces
rename(mapped = Species) %>%                      # Rename column to 'mapped'
select(mapped)                                    # Keep only the cleaned species column
# Function to extract taxonomy at a specific rank
# This utility function helps extract taxonomic classification between two levels (curr and nex).
extractTaxon <- function(x, curr, nex) {
if_else(
str_detect(x, paste0(curr, '_')) & !str_detect(x, paste0(nex, '_')), # Condition for extracting taxa
str_extract(x, paste0('(?<=_', curr, '_).*')),                      # If true, extract between '_curr_'
str_extract(x, paste0('(?<=_', curr, '_)(.*?)(?=_', nex, '_)'))     # If false, extract between '_curr_' and '_nex_'
)
}
# Obtain taxonomic classifications
# Applies the `extractTaxon` function across all taxonomic ranks and organizes them into a tidy tibble.
taxaOri <- taxa
taxaTable <- list(
Phylum = extractTaxon(taxa, 'p', 'c'),
Class = extractTaxon(taxa, 'c', 'o'),
Order = extractTaxon(taxa, 'o', 'f'),
Family = extractTaxon(taxa, 'f', 'g'),
Genus = extractTaxon(taxa, 'g', 's'),
Species = extractTaxon(taxa, 's', 'strain')
) %>%
lapply(function(x) { gsub('NA', '', x) }) %>%  # Remove 'NA' placeholders
as_tibble() %>%
mutate(
Species = if_else(Species != '', str_c(Genus, ' ', Species), Species),  # Add Genus to Species
Species = if_else(Species == 'Ruminococcus champanellensis',
'Ruminococcus chamellensis', Species),               # Correct a specific mislabel
AGORA2_mapped = if_else(Species %in% mappedSpecies$mapped, 'mapped', 'unmapped')) %>%
arrange(AGORA2_mapped)
# Load raw microbiome data
# Reads a taxonomy table and arranges it by the 'Taxon' column.
rawMicrobes <- read.csv(here('inputs', 'microbiome_abundances_and_taxonomy.csv')) %>% arrange(Taxon)
# Obtain all species in data
speciesInData <- taxaTable %>% filter(Species != '') %>% .$Species
# Obtain read counts for the original, species, and mapped reads
speciesMappingAbundances <- microbiomeSpeciesSummaryStats(rawMicrobes, fluxAll, mappedSpecies, speciesInData)
# Obtain summary statistics on phylum-level relative abundances before and after mapping
phylumMappingAbundances <- microbiomePhylumSummaryStats(rawMicrobes, fluxAll, mappedSpecies, speciesInData)
# Return a list of results
microbiomeTables <- list(taxaTable,speciesMappingAbundances, phylumMappingAbundances)
return(microbiomeTables)
}
getFluxSummary <- function(){
# Prepare function for formatting the average and sd values for each metabolite
source(here('scripts','prepareFluxes.R'))
# Define a function to format mean and standard deviation (MSD)
formatMSD <- function(x) {
# Compute the mean and standard deviation, round them, and format the result
paste0(
format(round(mean(x, na.rm = TRUE), 1), nsmall = 1, big.mark = ","), ' (',  # Mean
format(round(sd(x, na.rm = TRUE), 2), nsmall = 1, big.mark = ","), ' )'   # Standard deviation
)
}
# Process and scale microbiome fluxes
scaledFluxes <- prepareFluxes('NET', 6) %>%
# Transform wide format to long format for 'NET' microbiome fluxes
pivot_longer(cols = -c('ID', 'Sex'), names_to = 'Metabolite', values_to = 'Net microbiome flux') %>%
# Join with host-microbiome flux data
left_join(
prepareFluxes('', 6) %>%
pivot_longer(cols = -c('ID', 'Sex'), names_to = 'Metabolite', values_to = 'Host-microbiome flux')
) %>%
# Join with fractional microbiome contribution data
left_join(
prepareFluxes('FRAC', 6) %>%
pivot_longer(cols = -c('ID', 'Sex'), names_to = 'Metabolite', values_to = 'Fractional microbiome contribution')
) %>%
# Transform data into a long format for further processing
pivot_longer(
cols = -c('ID', 'Sex', 'Metabolite'),
names_to = 'Type',
values_to = 'value'
) %>%
# Convert 'Type' into a factor to control the order of levels
mutate(Type = factor(
Type,
levels = c('Host-microbiome flux', 'Net microbiome flux', 'Fractional microbiome contribution')
)) %>%
# Group by metabolite, sex, and type to compute summaries
group_by(Metabolite, Sex, Type) %>%
# Apply the `formatMSD` function to compute and format mean and SD for each group
summarise(Mean = formatMSD(value)) %>%
# Transform the summarized data back into a wide format for presentation
pivot_wider(
names_from = c('Sex', 'Type'),
values_from = 'Mean'
) %>%
# Ungroup the data to return a flat table
ungroup()
}
# Define function for collecting all results to be collected in the supplementary materials.
collectSupplements <- function(table, description){
# INPUTS:
#   table        - Data frame containing a table with study results
#   description  - Character array describing the associated table with results
#
# OUTPUTS:
#   sheetInfo    - List array with supplementary material tables
#   counter      - Counting variable indicating the last added supplementary table
#
# .. Author: - Tim Hensen
#            - Annotated version created on 2024-11-18
# Set as global sheet list variable
if (!exists("sheetInfo")){
sheetInfo <<- list()
}
# Initialise global counter
if(is_empty(sheetInfo)){
counter <<- 0
}
if (!description %in% sheetInfo[['header']]){
# increment counter if description is not already in list
counter <<- counter + 1
}
# Collect information for supplementary table
sheetInfo[['name']][counter] <<- paste0('Table S',counter)
sheetInfo[['header']][counter] <<- paste0(sheetInfo[['name']][counter],': ',description)
sheetInfo[['table']][[counter]] <<- table
}
# A new global list is created, which will be populated with all supplementary tables
sheetInfo <<- list()
# Generate tables for microbiome mapping coverages
microbiomeTables <- getMicrobiomeSuppTables(fluxAll)
# Add these tables to the supplementary materials
collectSupplements(microbiomeTables[[1]], 'Measured microbial taxa.')
#collectSupplements(microbiomeTables[[2]], 'Species mapping statistics')
#collectSupplements(microbiomeTables[[3]], 'Taxonomic read statistics')
# Also add stats on phylum and species abundances
collectSupplements(microbiomeTables[[2]], 'Mean percentage relative phylum abundances before and after mapping.')
collectSupplements(microbiomeTables[[3]], 'Mean percentage relative species before and after mapping.')
# Add metabolite list
collectSupplements(fluxSamples, 'List of in silico investigated metabolites.')
# Add raw flux predictions
rawfluxes <- prepareFluxes('',6) # Round fluxes on six decimals
rawfluxes$ID <- 1:length(rawfluxes$ID)
collectSupplements(rawfluxes, 'Predicted maximal fluxes in blood in mmol/day/person.')
# Add summary statistics on metabolite fluxes
fluxSummary <- getFluxSummary()
# Add summary statistics to the supplementary table
collectSupplements(fluxSummary, 'List of sex-specific mean flux values (SD).')
# Extract info on the metabolic groups
fluxgroups <- lapply(results$groups, paste,collapse = '; ') %>%
as_tibble() %>%
pivot_longer(cols=everything(),names_to = 'Groups',values_to = 'Included metabolites')
# Add flux groups to supplementary table info
collectSupplements(fluxgroups, 'Metabolic groups of essentially identical flux distributions.')
# Set function for cleaning the regression tables
cleanRegressionTables <- function(x){
x <- x %>%
select(-term) %>% # Remove predictor and cohort information
relocate(Formula,.after=metabolite) %>% # Move regression formula
mutate(Cohort = gsub('Complete','All samples',Cohort),
Formula = gsub('AgeERGO5','Age in years',Formula), # Process age information
Formula = gsub('Flux','Flux in blood',Formula),
Formula = gsub('g ','Global cognition score ',Formula), # Clarify the global cognition score
Formula = gsub('GRS_APOE','Polygenic risk score',Formula)) %>%
# Rename variables
rename(`regression formula` = Formula,
`2.5% CI` = `2.5 %`,
`97.5% CI` = `97.5 %`,
`regression beta` = `estimate`)
# Ensure each row name is capitalised
x[[1]] <- str_to_title(x[[1]])
return(x)
}
# Clean regression table on the fluxes
regSuplFluxes <- cleanRegressionTables(fluxreg$AD_risk) %>% select(-Cohort)
regSuplFluxesModeration <- cleanRegressionTables(fluxreg$Sex_moderation)
# Clean regressions on the microbiota
regSuplMicrobes <- cleanRegressionTables(microbereg$AD_risk) %>%
select(-Cohort) %>%
mutate(`regression formula` = gsub('Flux in blood', 'Relative abundance',`regression formula`)) %>% # Fix regression formula
rename(Species = metabolite)
regSuplMicrobesModeration <- cleanRegressionTables(microbereg$Sex_moderation) %>%
mutate(`regression formula` = gsub('Flux in blood', 'Relative abundance',`regression formula`)) %>% # Fix regression formula
rename(Species = metabolite)
# Rerun the metabolomic regressions again
metabolomeFiltered <- metabolome %>%
filter(grepl('bile', SUB_PATHWAY, ignore.case = TRUE) |
grepl('^tryptophan|^kynurenine|^creatine|^Butyrate/Isobutyrate (4:0)|^arginine', metabolite, ignore.case = TRUE) |
grepl('cholesterol', metabolite, ignore.case = TRUE) |
grepl('4-cholesten-3-one', metabolite, ignore.case = TRUE) |
grepl('7-alpha-hydroxy-3-oxo-4-cholestenoate', metabolite, ignore.case = TRUE))
metabolomereg <-runRegressionAnalyses(metabolomeFiltered,'AD_risk','Sex_moderation','','',file,'metabolome')
# Clean regressions table on the serum metabolomics
regSuplMetabolome <- cleanRegressionTables(metabolomereg$AD_risk) %>% select(-Cohort)
regSuplMetabolomeModeration <- cleanRegressionTables(metabolomereg$Sex_moderation)
## Regression outcomes
collectSupplements(regSuplFluxes, 'Regression outcomes on predicted fluxes against age and against global cognition')
## microbe-metabolite correlations
collectSupplements(metMicrobeLinks, 'Links between species and their respective ability to produce a given metabolite.')
collectSupplements(fluxMicrobeReg, 'Explained variance (R-squared) between species relative abundances and metabolic fluxes for metabolites each species can produce.')
## Microbe regressions
collectSupplements(regSuplMicrobes, 'Regression outcomes on relative species abundances against age and against global cognition')
serum_metabolites_supplement <- serum_metabolites %>%
rename(`super pathway` = SUPER_PATHWAY, `sub pathway` = SUB_PATHWAY) %>%
mutate(`analysed metabolite` = grepl('bile', `sub pathway`, ignore.case = TRUE) |
grepl('^tryptophan|^kynurenine|^creatine|^Butyrate/Isobutyrate (4:0)|^arginine', metabolite, ignore.case = TRUE) |
grepl('cholesterol', metabolite, ignore.case = TRUE) |
grepl('4-cholesten-3-one', metabolite, ignore.case = TRUE) |
grepl('7-alpha-hydroxy-3-oxo-4-cholestenoate', metabolite, ignore.case = TRUE)) %>%
arrange(desc(`analysed metabolite`))
# Capitalise the first letter
serum_metabolites_supplement[[1]] <- str_to_title(serum_metabolites_supplement[[1]])
# Serum metabolite names
collectSupplements(serum_metabolites_supplement, 'Named metabolites in serum metabolomics.')
# Add metabolite regressions to supplementary materials
collectSupplements(regSuplMetabolome, 'Regression outcomes on serum metabolomic concentrations against age and against global cognition')
# Set function for cleaning the univariate test results
cleanUnivariateTestTables <- function(x){
x <- x %>%
relocate(method,.after=1) %>%
# Remove unnecessary variables
select(-any_of(c('estimate','estimate1','estimate2','conf.low','conf.high','alternative','p.adj.signif','.y.'))) %>%
# Rename columns for clarity
rename_with(~ if_else(. == 'p', 'p.value', .), everything()) %>%
rename_with(~ if_else(. == 'p', 'FDR', .), everything()) %>%
rename_with(~ if_else(. == 'df', 'degrees of freedom', .), everything())
# Ensure each row name is capitalised
x[[1]] <- str_to_title(x[[1]])
return(x)
}
# Clean results on fluxes and APOE genotype
apoeSuplFlux <- cleanUnivariateTestTables(apoeFluxRes$kruskall_Pooled)
apoeSuplFluxDun <- cleanUnivariateTestTables(apoeFluxRes$Dunns_Pooled)
# Clean results on species relative abundances and APOE genotype
apoeSuplMicrobes <- cleanUnivariateTestTables(apoeMicroRes$kruskall_Pooled)
apoeSuplMicrobesDun <- cleanUnivariateTestTables(apoeMicroRes$Dunns_Pooled)
# Clean results on serum metabolomics and APOE genotype
apoeSuplMetabolome <- cleanUnivariateTestTables(apoeMetabolomeRes$kruskall_Pooled)
apoeSuplMetabolomeDun <- cleanUnivariateTestTables(apoeMetabolomeRes$Dunns_Pooled)
# Clean results on sex differences with mapped phylum and species reads
phylumSexDiffSupl <- cleanUnivariateTestTables(phylumSexDiff)
speciesSexDiffSupl <- cleanUnivariateTestTables(speciesSexDiff)
# Finally, clean the results on sex differences with the fluxes
sexDiffFluxSupl <- cleanUnivariateTestTables(sexDiffFlux)
# Add APOE results to supplementary materials
collectSupplements(apoeSuplFlux, 'Kruskall-Wallis test statistics on the flux predictions against APOE risk groups.')
collectSupplements(apoeFluxRes$Dunns_Pooled, 'Dunns multiple comparison statistics of flux predictions against the pooled APOE genotypes.')
# APOE results on pan species abundances
collectSupplements(apoeSuplMicrobes, 'Kruskall-Wallis test statistics on the relative species abundances against APOE risk groups.')
collectSupplements(apoeSuplMicrobesDun, 'Dunns multiple comparison statistics of relative species abundances against the pooled APOE genotypes.')
# Save metabolomics results
collectSupplements(apoeSuplMetabolome, 'Kruskall-Wallis test statistics of serum metabolite concentrations in cholesterol and bile acid metabolism against APOE risk groups.')
collectSupplements(apoeSuplMetabolomeDun, 'Dunns multiple comparison statistics of serum metabolite concentrations in cholesterol and bile acid metabolism against the pooled APOE genotypes.')
# Sex-specific microbe and flux abundances
collectSupplements(phylumSexDiffSupl, 'Wilcoxon statistics on phylum-level sex differences.')
collectSupplements(speciesSexDiffSupl, 'Wilcoxon statistics on species-level sex differences.')
collectSupplements(sexDiffFluxSupl, 'Wilcoxon statistics on sex differences for the predicted fluxes')
# Regression outcomes of sex-specific results against cognition
collectSupplements(regSuplFluxesModeration, 'Sex-specific and sex stratified regression outcomes on flux predictions against global cognition')
collectSupplements(regSuplMicrobesModeration, 'Sex-specific and sex stratified regression outcomes on relative species abundances against global cognition')
collectSupplements(regSuplMetabolomeModeration, 'Sex-specific and sex stratified regression outcomes on serum metabolite concentrations against global cognition')
## Add index table
# Increase JAVA memory
options(java.parameters = "- Xmx1024m")
# Load function for automated excel saving
source(here('scripts','r2excel.r'))
# Create workbook
wb <- createWorkbook(type="xlsx")
# Create tibble with headers
headers <- sheetInfo$header %>% as_tibble() %>% rename(`Overview of supplemental tables.`=value)
# Then, create the new sheet
sheet <- createSheet(wb, sheetName = 'Index')
# Add index table to workbook
xlsx.addTable(wb, sheet, headers, startCol=1,row.names=TRUE)
# Add sheets in sheetInfo to workbook
for (i in 1:length(sheetInfo$name)){
# Then, create the new sheet
sheet <- createSheet(wb, sheetName = sheetInfo$name[i])
# Add header
xlsx.addHeader(wb, sheet, value=sheetInfo$header[i],level=2, color="black")
xlsx.addLineBreak(sheet, 1)
# Add table : add a data frame
xlsx.addTable(wb, sheet, sheetInfo$table[[i]], startCol=1,row.names=TRUE)
}
# save the workbook to an Excel file
path <- here("Supplementary_Tables.xlsx")
if (file.exists(path)){
file.remove(path)
}
saveWorkbook(wb, path)
# Define a utility function for writing tables to files
txtWrite <- function(table, filename) {
# Write the given table to a file in the 'overleaf' directory
# - Row names are excluded
# - Fields are separated by commas
# - Quotes around character values are not included
write.table(table, here('overleaf', filename), row.names = FALSE, sep = ',', quote = FALSE)
}
# Write data tables for the manuscript latex source code
# Write the table of phylum-level abundances to a text file
txtWrite(phylumAbun, 'phylumAbundances.txt')
# Write the first three rows of the species-level abundance table to a text file
txtWrite(speciesAbun[1:3, ], 'speciesAbundances.txt')
# Generate a table of metabolite grouping statistics
metaboliteGroupings <- tibble(
Metabolites_raw = ncol(fluxes) - 2,                     # Number of raw metabolites (excluding ID/Sex columns)
Filtered_metabolites = ncol(fluxesPruned) - 2,         # Number of metabolites after filtering
Groups = length(results$groups),                      # Total number of groups identified
Metabolites_in_groups = sum(sapply(results$groups, length)), # Total number of metabolites across all groups
Analysed_metabolites = ncol(fluxes2) - 2               # Number of metabolites after consolidating groups
) %>%
# Write the metabolite grouping statistics to a file
txtWrite(., 'metaboliteGroupingStats.txt')
# Analyze flux sample classification and removal statistics
fluxSamples %>%
group_by(Classification, Removed) %>%                   # Group by classification and removal status
summarise(value = n()) %>%                              # Count the number of samples in each group
pivot_wider(names_from = Removed) %>%                   # Reshape data to have columns for 'Removed' values
mutate(Classification = tolower(Classification)) %>%    # Convert the classification names to lowercase
# Write the resulting table to a file
txtWrite(., 'metaboliteClassNumbers.txt')
## Next, we define results for flux microbe correlations
# Filter and export selected metabolites of interest
fluxMicrobeReg %>%
select(c('Species', 'L-arginine', '3-Dehydrocholate', '7-Dehydrocholate',
'Deoxycholate', 'Lithocholate', 'Creatine', 'L-arginine',
'S-Adenosyl-L-methionine', 'L-tryptophan', 'Formaldehyde', 'Formate')) %>%
arrange(Species) %>%                            # Sort by species for clarity
txtWrite(., 'flux_microbe_correlations.txt')    # Save results to a file
## Save age and cognition flux results
fluxreg$AD_risk %>%
filter(metabolite %in% c('L-arginine', '3-dehydro-CA/CDCA', 'Deoxycholate',
'Lithocholate', '7-dehydro-CA/CDCA'), # Select specific metabolites of interest
term %in% c('AgeERGO5', 'Flux')) %>%                    # Select terms relevant to age or flux
select(metabolite, term, p.value, FDR) %>%                     # Keep relevant columns for results
txtWrite(., 'ageCognitionfluxresults.txt')                     # Save results to a file
## Save age and cognition microbe results
# Define microbes of interest
microbesOfInterest <- c('Parabacteroides distasonis', 'Bilophila wadsworthia',
'Collinsella aerofaciens', 'Butyrivibrio crossotus',
'Eggerthella lenta')
microbereg$AD_risk %>%
filter(metabolite %in% microbesOfInterest,              # Filter for microbes of interest
term %in% c('AgeERGO5', 'Flux')) %>%             # Select terms relevant to age or flux
select(metabolite, term, p.value, FDR) %>%              # Keep relevant columns
arrange(term, p.value) %>%                              # Sort by term and then by p-value
txtWrite(., 'ageCognitionMicrobeResults.txt')           # Save results to a file
## Save cognition serum metabolite results
metabolomereg$AD_risk %>%
filter(term == 'Flux') %>%                              # Filter for flux-specific terms
filter(grepl('cholic|cholate', metabolite)) %>%         # Select metabolites containing "cholic" or "cholate"
select(metabolite, estimate, p.value, FDR) %>%          # Keep relevant columns
rename_with(~ gsub(".", "", .x, fixed = TRUE)) %>%      # Remove dots in column names for clean output
txtWrite(., 'cognitionSerumResults.txt')                # Save results to a file
## Save APOE flux results
# Combine APOE-related summary statistics from multiple data frames
apoePvalues <- rbind(apoeFluxSummaryStats,                 # Flux summary statistics
microbeAPOEstats,                    # Microbe statistics
apoeMetabolomeSummaryStats) %>%      # Metabolome statistics
relocate(E2_E3, .before = E2_E4)                        # Reorder columns for clarity
txtWrite(apoePvalues, 'apoePvalues.txt')                  # Save the combined table to a file
# Phylum and species abundances
# Save sex differences in phylum abundances
txtWrite(
phylumSexDiff %>%
select(Phylum, p, p.adj),              # Select only Phylum, p-value, and adjusted p-value columns
'phylumSexDifferences.txt'              # Save to a file for phylum-level results
)
# Save sex differences in species abundances
txtWrite(
speciesSexDiff %>%
select(Species, p, p.adj) %>%         # Select only Species, p-value, and adjusted p-value columns
slice(1:5),                           # Keep only the top 5 rows for compact output
'speciesSexDifferences.txt'             # Save to a file for species-level results
)
## Save cognition-related sex-specific results
txtWrite(
sexdiff,                                 # Data containing cognition and sex-specific results
'sexdifferencesAgeCog.txt'              # Save the results to a file
)
# Summarize flux and species flux differences
txtWrite(
SummarySexFluxMicrobeDiff,               # Summary data of flux differences by sex
'sexDiffSummary.txt'                     # Save to a file for a high-level summary
)
# Save cognition flux differences by sex
fluxreg$Sex_moderation %>%
filter(
metabolite %in% fluxCognitionSexRes,   # Filter for metabolites related to sex-specific cognition results
term %in% c('Flux', 'Flux:SexMale')    # Include terms related to general flux and male-specific flux
) %>%
mutate(term = factor(term, levels = c('Flux:SexMale', 'Flux'))) %>%  # Reorder terms for logical grouping
select(metabolite, term, Cohort, estimate, p.value, FDR) %>%         # Select relevant columns
arrange(metabolite, term) %>%                                       # Sort results by metabolite and term
txtWrite(., 'sexFluxCogResults.txt')                                # Save to a file for flux-based results
# Save cognition-related microbe differences by sex
microbereg$Sex_moderation %>%
filter(term %in% c('Flux', 'Flux:SexMale')) %>%                      # Include terms for general flux and male-specific flux
select(metabolite, term, Cohort, estimate, p.value, FDR) %>%         # Select relevant columns
filter(metabolite %in% c('Bacteroides caccae',                      # Filter for specific microbes of interest
'Bacteroides vulgatus',
'Bacteroides ovatus')) %>%
mutate(term = factor(term, levels = c('Flux:SexMale', 'Flux'))) %>% # Reorder terms for logical grouping
arrange(metabolite, term) %>%                                       # Sort results by metabolite and term
txtWrite(., 'sexMicrobeCogResults.txt')                             # Save to a file for microbe-based results
